Terminals which are not used

   TOK_ROOT
   TOK_INDEX
   TOK_CALL
   TOK_NEWSTRING
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_BLOCK
   TOK_VARDECLINIT
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_GT
   TOK_LT
   '/'
   '%'
   '!'


State 56 conflicts: 2 shift/reduce
State 57 conflicts: 2 shift/reduce
State 94 conflicts: 2 shift/reduce
State 95 conflicts: 2 shift/reduce
State 96 conflicts: 2 shift/reduce
State 97 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 12 shift/reduce
State 105 conflicts: 12 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | /* empty */

    7 structdef: TOK_STRUCT TOK_IDENT '{' identdecls '}'

    8 identdecls: identdecl ';'
    9           | identdecls identdecl ';'

   10 identdecl: basetype TOK_NEWARRAY TOK_IDENT
   11          | basetype TOK_IDENT

   12 basetype: TOK_VOID
   13         | TOK_BOOL
   14         | TOK_CHAR
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_TYPEID
   18         | TOK_IDENT

   19 block: '{' state_list '}'
   20      | '{' '}'
   21      | ';'

   22 state_list: state_list statement
   23           | statement

   24 statement: block
   25          | vardeclinit
   26          | whilehead
   27          | ifelse
   28          | returnhead
   29          | expr ';'

   30 vardeclinit: identdecl '=' expr ';'

   31 whilehead: TOK_WHILE '(' expr ')' statement

   32 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   33       | TOK_IF '(' expr ')' statement

   34 returnhead: TOK_RETURN ';'
   35           | TOK_RETURN expr ';'

   36 expr: expr '+' expr
   37     | '+' expr
   38     | expr '-' expr
   39     | '-' expr
   40     | expr '=' expr
   41     | expr TOK_EQ expr
   42     | expr TOK_NE expr
   43     | expr '<' expr
   44     | expr '>' expr
   45     | expr TOK_LE expr
   46     | expr TOK_GE expr
   47     | expr '.' expr
   48     | expr '*' expr
   49     | allocator
   50     | call
   51     | variable
   52     | constant
   53     | '(' expr ')'

   54 allocator: TOK_NEW TOK_IDENT '(' ')'
   55          | TOK_NEW TOK_STRING '(' expr ')'
   56          | TOK_NEW basetype '[' expr ']'

   57 call: TOK_IDENT call_list ')'
   58     | TOK_IDENT '(' ')'

   59 call_list: call_list ',' expr
   60          | '(' expr

   61 variable: TOK_IDENT
   62         | expr '[' expr ']'
   63         | expr '.'
   64         | TOK_FIELD

   65 constant: TOK_INTCON
   66         | TOK_CHARCON
   67         | TOK_STRINGCON
   68         | TOK_FALSE
   69         | TOK_TRUE
   70         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37)
'(' (40) 31 32 33 53 54 55 58 60
')' (41) 31 32 33 53 54 55 57 58
'*' (42) 48
'+' (43) 36 37
',' (44) 59
'-' (45) 38 39
'.' (46) 47 63
'/' (47)
';' (59) 5 8 9 21 29 30 34 35
'<' (60) 43
'=' (61) 30 40
'>' (62) 44
'[' (91) 56 62
']' (93) 56 62
'{' (123) 7 19 20
'}' (125) 4 7 19 20
error (256) 4 5
TOK_ROOT (258)
TOK_TYPEID (259) 17
TOK_FIELD (260) 64
TOK_INDEX (261)
TOK_POS (262)
TOK_NEG (263)
TOK_CALL (264)
TOK_NEWARRAY (265) 10
TOK_NEWSTRING (266)
TOK_IFELSE (267)
TOK_RETURNVOID (268)
TOK_BLOCK (269)
TOK_VARDECLINIT (270)
TOK_FUNCTION (271)
TOK_PARAMLIST (272)
TOK_PROTOTYPE (273)
TOK_WHILE (274) 31
TOK_IDENT (275) 7 10 11 18 54 57 58 61
TOK_CHARCON (276) 66
TOK_INTCON (277) 65
TOK_STRINGCON (278) 67
TOK_NEW (279) 54 55 56
TOK_NULL (280) 70
TOK_STRING (281) 16 55
TOK_STRUCT (282) 7
TOK_VOID (283) 12
TOK_BOOL (284) 13
TOK_CHAR (285) 14
TOK_INT (286) 15
TOK_RETURN (287) 34 35
TOK_FALSE (288) 68
TOK_TRUE (289) 69
TOK_LE (290) 45
TOK_GE (291) 46
TOK_ELSE (292) 32
TOK_IF (293) 32 33
TOK_GT (294)
TOK_LT (295)
TOK_NE (296) 42
TOK_EQ (297) 41


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
start (62)
    on left: 1, on right: 0
program (63)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (64)
    on left: 7, on right: 2
identdecls (65)
    on left: 8 9, on right: 7 9
identdecl (66)
    on left: 10 11, on right: 8 9 30
basetype (67)
    on left: 12 13 14 15 16 17 18, on right: 10 11 56
block (68)
    on left: 19 20 21, on right: 24
state_list (69)
    on left: 22 23, on right: 19 22
statement (70)
    on left: 24 25 26 27 28 29, on right: 3 22 23 31 32 33
vardeclinit (71)
    on left: 30, on right: 25
whilehead (72)
    on left: 31, on right: 26
ifelse (73)
    on left: 32 33, on right: 27
returnhead (74)
    on left: 34 35, on right: 28
expr (75)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
   , on right: 29 30 31 32 33 35 36 37 38 39 40 41 42 43 44 45 46 47
    48 53 55 56 59 60 62 63
allocator (76)
    on left: 54 55 56, on right: 49
call (77)
    on left: 57 58, on right: 50
call_list (78)
    on left: 59 60, on right: 57 59
variable (79)
    on left: 61 62 63 64, on right: 51
constant (80)
    on left: 65 66 67 68 69 70, on right: 52


state 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    error          shift, and go to state 4
    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_STRUCT     shift, and go to state 15
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    $end  reduce using rule 1 (start)

    structdef    go to state 29
    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    statement    go to state 33
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 3

    0 $accept: start $end .

    $default  accept


state 4

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 43
    ';'  shift, and go to state 44


state 5

   17 basetype: TOK_TYPEID .

    $default  reduce using rule 17 (basetype)


state 6

   64 variable: TOK_FIELD .

    $default  reduce using rule 64 (variable)


state 7

   31 whilehead: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 45


state 8

   18 basetype: TOK_IDENT .
   57 call: TOK_IDENT . call_list ')'
   58     | TOK_IDENT . '(' ')'
   61 variable: TOK_IDENT .

    '('  shift, and go to state 46

    TOK_NEWARRAY  reduce using rule 18 (basetype)
    TOK_IDENT     reduce using rule 18 (basetype)
    $default      reduce using rule 61 (variable)

    call_list  go to state 47


state 9

   66 constant: TOK_CHARCON .

    $default  reduce using rule 66 (constant)


state 10

   65 constant: TOK_INTCON .

    $default  reduce using rule 65 (constant)


state 11

   67 constant: TOK_STRINGCON .

    $default  reduce using rule 67 (constant)


state 12

   54 allocator: TOK_NEW . TOK_IDENT '(' ')'
   55          | TOK_NEW . TOK_STRING '(' expr ')'
   56          | TOK_NEW . basetype '[' expr ']'

    TOK_TYPEID  shift, and go to state 5
    TOK_IDENT   shift, and go to state 48
    TOK_STRING  shift, and go to state 49
    TOK_VOID    shift, and go to state 16
    TOK_BOOL    shift, and go to state 17
    TOK_CHAR    shift, and go to state 18
    TOK_INT     shift, and go to state 19

    basetype  go to state 50


state 13

   70 constant: TOK_NULL .

    $default  reduce using rule 70 (constant)


state 14

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


state 15

    7 structdef: TOK_STRUCT . TOK_IDENT '{' identdecls '}'

    TOK_IDENT  shift, and go to state 51


state 16

   12 basetype: TOK_VOID .

    $default  reduce using rule 12 (basetype)


state 17

   13 basetype: TOK_BOOL .

    $default  reduce using rule 13 (basetype)


state 18

   14 basetype: TOK_CHAR .

    $default  reduce using rule 14 (basetype)


state 19

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


state 20

   34 returnhead: TOK_RETURN . ';'
   35           | TOK_RETURN . expr ';'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 53

    expr       go to state 54
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 21

   68 constant: TOK_FALSE .

    $default  reduce using rule 68 (constant)


state 22

   69 constant: TOK_TRUE .

    $default  reduce using rule 69 (constant)


state 23

   32 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   33       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 55


state 24

   37 expr: '+' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 56
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 25

   39 expr: '-' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 57
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 26

   53 expr: '(' . expr ')'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 58
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 27

   21 block: ';' .

    $default  reduce using rule 21 (block)


state 28

   19 block: '{' . state_list '}'
   20      | '{' . '}'

    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 59
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    state_list   go to state 60
    statement    go to state 61
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 29

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 30

   30 vardeclinit: identdecl . '=' expr ';'

    '='  shift, and go to state 62


state 31

   10 identdecl: basetype . TOK_NEWARRAY TOK_IDENT
   11          | basetype . TOK_IDENT

    TOK_NEWARRAY  shift, and go to state 63
    TOK_IDENT     shift, and go to state 64


state 32

   24 statement: block .

    $default  reduce using rule 24 (statement)


state 33

    3 program: program statement .

    $default  reduce using rule 3 (program)


state 34

   25 statement: vardeclinit .

    $default  reduce using rule 25 (statement)


state 35

   26 statement: whilehead .

    $default  reduce using rule 26 (statement)


state 36

   27 statement: ifelse .

    $default  reduce using rule 27 (statement)


state 37

   28 statement: returnhead .

    $default  reduce using rule 28 (statement)


state 38

   29 statement: expr . ';'
   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ';'     shift, and go to state 75
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 39

   49 expr: allocator .

    $default  reduce using rule 49 (expr)


state 40

   50 expr: call .

    $default  reduce using rule 50 (expr)


state 41

   51 expr: variable .

    $default  reduce using rule 51 (expr)


state 42

   52 expr: constant .

    $default  reduce using rule 52 (expr)


state 43

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


state 44

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


state 45

   31 whilehead: TOK_WHILE '(' . expr ')' statement

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 78
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 46

   58 call: TOK_IDENT '(' . ')'
   60 call_list: '(' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 79

    expr       go to state 80
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 47

   57 call: TOK_IDENT call_list . ')'
   59 call_list: call_list . ',' expr

    ')'  shift, and go to state 81
    ','  shift, and go to state 82


state 48

   18 basetype: TOK_IDENT .
   54 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 83

    $default  reduce using rule 18 (basetype)


state 49

   16 basetype: TOK_STRING .
   55 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 84

    $default  reduce using rule 16 (basetype)


state 50

   56 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 85


state 51

    7 structdef: TOK_STRUCT TOK_IDENT . '{' identdecls '}'

    '{'  shift, and go to state 86


state 52

   57 call: TOK_IDENT . call_list ')'
   58     | TOK_IDENT . '(' ')'
   61 variable: TOK_IDENT .

    '('  shift, and go to state 46

    $default  reduce using rule 61 (variable)

    call_list  go to state 47


state 53

   34 returnhead: TOK_RETURN ';' .

    $default  reduce using rule 34 (returnhead)


state 54

   35 returnhead: TOK_RETURN expr . ';'
   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ';'     shift, and go to state 87
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 55

   32 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   33       | TOK_IF '(' . expr ')' statement

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 88
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 56

   36 expr: expr . '+' expr
   37     | '+' expr .
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 37 (expr)]
    '>'       [reduce using rule 37 (expr)]
    $default  reduce using rule 37 (expr)


state 57

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   39     | '-' expr .
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 39 (expr)]
    '>'       [reduce using rule 39 (expr)]
    $default  reduce using rule 39 (expr)


state 58

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   53     | '(' expr . ')'
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ')'     shift, and go to state 89
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 59

   20 block: '{' '}' .

    $default  reduce using rule 20 (block)


state 60

   19 block: '{' state_list . '}'
   22 state_list: state_list . statement

    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 90
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    statement    go to state 91
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 61

   23 state_list: statement .

    $default  reduce using rule 23 (state_list)


state 62

   30 vardeclinit: identdecl '=' . expr ';'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 92
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 63

   10 identdecl: basetype TOK_NEWARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 93


state 64

   11 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (identdecl)


state 65

   45 expr: expr TOK_LE . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 94
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 66

   46 expr: expr TOK_GE . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 95
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 67

   40 expr: expr '=' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 96
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 68

   42 expr: expr TOK_NE . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 97
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 69

   41 expr: expr TOK_EQ . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 98
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 70

   36 expr: expr '+' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 99
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 71

   38 expr: expr '-' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 100
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 72

   48 expr: expr '*' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 101
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 73

   62 variable: expr '[' . expr ']'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 102
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 74

   47 expr: expr '.' . expr
   63 variable: expr '.' .

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '('            shift, and go to state 26

    $default  reduce using rule 63 (variable)

    expr       go to state 103
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 75

   29 statement: expr ';' .

    $default  reduce using rule 29 (statement)


state 76

   43 expr: expr '<' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 104
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 77

   44 expr: expr '>' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 105
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 78

   31 whilehead: TOK_WHILE '(' expr . ')' statement
   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ')'     shift, and go to state 106
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 79

   58 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 58 (call)


state 80

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   60 call_list: '(' expr .
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77

    $default  reduce using rule 60 (call_list)


state 81

   57 call: TOK_IDENT call_list ')' .

    $default  reduce using rule 57 (call)


state 82

   59 call_list: call_list ',' . expr

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 107
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 83

   54 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 108


state 84

   55 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 109
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 85

   56 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FIELD      shift, and go to state 6
    TOK_IDENT      shift, and go to state 52
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 110
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


state 86

    7 structdef: TOK_STRUCT TOK_IDENT '{' . identdecls '}'

    TOK_TYPEID  shift, and go to state 5
    TOK_IDENT   shift, and go to state 111
    TOK_STRING  shift, and go to state 14
    TOK_VOID    shift, and go to state 16
    TOK_BOOL    shift, and go to state 17
    TOK_CHAR    shift, and go to state 18
    TOK_INT     shift, and go to state 19

    identdecls  go to state 112
    identdecl   go to state 113
    basetype    go to state 31


state 87

   35 returnhead: TOK_RETURN expr ';' .

    $default  reduce using rule 35 (returnhead)


state 88

   32 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   33       | TOK_IF '(' expr . ')' statement
   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ')'     shift, and go to state 114
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 89

   53 expr: '(' expr ')' .

    $default  reduce using rule 53 (expr)


state 90

   19 block: '{' state_list '}' .

    $default  reduce using rule 19 (block)


state 91

   22 state_list: state_list statement .

    $default  reduce using rule 22 (state_list)


state 92

   30 vardeclinit: identdecl '=' expr . ';'
   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ';'     shift, and go to state 115
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 93

   10 identdecl: basetype TOK_NEWARRAY TOK_IDENT .

    $default  reduce using rule 10 (identdecl)


state 94

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   45     | expr TOK_LE expr .
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71
    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 45 (expr)]
    '>'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


state 95

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   46     | expr TOK_GE expr .
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71
    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 46 (expr)]
    '>'       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


state 96

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   40     | expr '=' expr .
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77

    '<'       [reduce using rule 40 (expr)]
    '>'       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)


state 97

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   42     | expr TOK_NE expr .
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71
    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 42 (expr)]
    '>'       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)


state 98

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   41     | expr TOK_EQ expr .
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71
    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 41 (expr)]
    '>'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)


state 99

   36 expr: expr . '+' expr
   36     | expr '+' expr .
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 36 (expr)]
    '>'       [reduce using rule 36 (expr)]
    $default  reduce using rule 36 (expr)


state 100

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   38     | expr '-' expr .
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '*'  shift, and go to state 72
    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 38 (expr)]
    '>'       [reduce using rule 38 (expr)]
    $default  reduce using rule 38 (expr)


state 101

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   48     | expr '*' expr .
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '['  shift, and go to state 73
    '.'  shift, and go to state 74
    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 48 (expr)]
    '>'       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


state 102

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   62         | expr '[' expr . ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    ']'     shift, and go to state 116
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 103

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   47     | expr '.' expr .
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    '<'  shift, and go to state 76
    '>'  shift, and go to state 77

    '<'       [reduce using rule 47 (expr)]
    '>'       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


state 104

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   43     | expr '<' expr .
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77

    TOK_LE    [reduce using rule 43 (expr)]
    TOK_GE    [reduce using rule 43 (expr)]
    '='       [reduce using rule 43 (expr)]
    TOK_NE    [reduce using rule 43 (expr)]
    TOK_EQ    [reduce using rule 43 (expr)]
    '+'       [reduce using rule 43 (expr)]
    '-'       [reduce using rule 43 (expr)]
    '*'       [reduce using rule 43 (expr)]
    '['       [reduce using rule 43 (expr)]
    '.'       [reduce using rule 43 (expr)]
    '<'       [reduce using rule 43 (expr)]
    '>'       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


state 105

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   44     | expr '>' expr .
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77

    TOK_LE    [reduce using rule 44 (expr)]
    TOK_GE    [reduce using rule 44 (expr)]
    '='       [reduce using rule 44 (expr)]
    TOK_NE    [reduce using rule 44 (expr)]
    TOK_EQ    [reduce using rule 44 (expr)]
    '+'       [reduce using rule 44 (expr)]
    '-'       [reduce using rule 44 (expr)]
    '*'       [reduce using rule 44 (expr)]
    '['       [reduce using rule 44 (expr)]
    '.'       [reduce using rule 44 (expr)]
    '<'       [reduce using rule 44 (expr)]
    '>'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


state 106

   31 whilehead: TOK_WHILE '(' expr ')' . statement

    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    statement    go to state 117
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 107

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   59 call_list: call_list ',' expr .
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77

    $default  reduce using rule 59 (call_list)


state 108

   54 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 54 (allocator)


state 109

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   55 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    '.'     shift, and go to state 74
    ')'     shift, and go to state 118
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 110

   36 expr: expr . '+' expr
   38     | expr . '-' expr
   40     | expr . '=' expr
   41     | expr . TOK_EQ expr
   42     | expr . TOK_NE expr
   43     | expr . '<' expr
   44     | expr . '>' expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GE expr
   47     | expr . '.' expr
   48     | expr . '*' expr
   56 allocator: TOK_NEW basetype '[' expr . ']'
   62 variable: expr . '[' expr ']'
   63         | expr . '.'

    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '='     shift, and go to state 67
    TOK_NE  shift, and go to state 68
    TOK_EQ  shift, and go to state 69
    '+'     shift, and go to state 70
    '-'     shift, and go to state 71
    '*'     shift, and go to state 72
    '['     shift, and go to state 73
    ']'     shift, and go to state 119
    '.'     shift, and go to state 74
    '<'     shift, and go to state 76
    '>'     shift, and go to state 77


state 111

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


state 112

    7 structdef: TOK_STRUCT TOK_IDENT '{' identdecls . '}'
    9 identdecls: identdecls . identdecl ';'

    TOK_TYPEID  shift, and go to state 5
    TOK_IDENT   shift, and go to state 111
    TOK_STRING  shift, and go to state 14
    TOK_VOID    shift, and go to state 16
    TOK_BOOL    shift, and go to state 17
    TOK_CHAR    shift, and go to state 18
    TOK_INT     shift, and go to state 19
    '}'         shift, and go to state 120

    identdecl  go to state 121
    basetype   go to state 31


state 113

    8 identdecls: identdecl . ';'

    ';'  shift, and go to state 122


state 114

   32 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   33       | TOK_IF '(' expr ')' . statement

    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    statement    go to state 123
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 115

   30 vardeclinit: identdecl '=' expr ';' .

    $default  reduce using rule 30 (vardeclinit)


state 116

   62 variable: expr '[' expr ']' .

    $default  reduce using rule 62 (variable)


state 117

   31 whilehead: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 31 (whilehead)


state 118

   55 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 55 (allocator)


state 119

   56 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 56 (allocator)


state 120

    7 structdef: TOK_STRUCT TOK_IDENT '{' identdecls '}' .

    $default  reduce using rule 7 (structdef)


state 121

    9 identdecls: identdecls identdecl . ';'

    ';'  shift, and go to state 124


state 122

    8 identdecls: identdecl ';' .

    $default  reduce using rule 8 (identdecls)


state 123

   32 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   33       | TOK_IF '(' expr ')' statement .

    $default  reduce using rule 33 (ifelse)


state 124

    9 identdecls: identdecls identdecl ';' .

    $default  reduce using rule 9 (identdecls)


state 125

   32 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_TYPEID     shift, and go to state 5
    TOK_FIELD      shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_IDENT      shift, and go to state 8
    TOK_CHARCON    shift, and go to state 9
    TOK_INTCON     shift, and go to state 10
    TOK_STRINGCON  shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_STRING     shift, and go to state 14
    TOK_VOID       shift, and go to state 16
    TOK_BOOL       shift, and go to state 17
    TOK_CHAR       shift, and go to state 18
    TOK_INT        shift, and go to state 19
    TOK_RETURN     shift, and go to state 20
    TOK_FALSE      shift, and go to state 21
    TOK_TRUE       shift, and go to state 22
    TOK_IF         shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    identdecl    go to state 30
    basetype     go to state 31
    block        go to state 32
    statement    go to state 126
    vardeclinit  go to state 34
    whilehead    go to state 35
    ifelse       go to state 36
    returnhead   go to state 37
    expr         go to state 38
    allocator    go to state 39
    call         go to state 40
    variable     go to state 41
    constant     go to state 42


state 126

   32 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 32 (ifelse)
